#+TITLE: Getting data from the web with python
#+AUTHOR: Jan Boone

In this notebook we show how you can get publicly available data directly "into python". 

We will use [[https://pandas-datareader.readthedocs.io/en/latest/remote_data.html][pandas datareader]] to get data from a number of sources. Look at the documentation to see which sources are available and how to retrieve them from the web. In fact, there is also a [[https://www.datacamp.com/courses/importing-managing-financial-data-in-python][datacamp course]] on this. Here I give a brief overview of the possibilities.

First, you need to install this datareader. The instructions can be found [[https://pandas-datareader.readthedocs.io/en/latest/index.html][here]]. If you use the anaconda python distribution, you can type in a shell/terminal/command prompt: `conda install pandas-datareader`. 


* Financial data

We first import a number of libraries that we need below. Pandas is the main library in python to deal with datasets. On datacamp there are a number of introductions to pandas. These are highly recommended when you want to work with data.

#+BEGIN_SRC ipython
import pandas as pd
import matplotlib.pyplot as plt
from pandas_datareader.data import DataReader
from datetime import date # Date & time functionality
%matplotlib inline
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

Now we are going to use datareader to import data from Google (specified in ~data_source~). The data we import is stockmarket data for Google (specified in ~ticker~). We specify the start-date and the end-date for our data. The cell below also gives the default values in case you do not specify the dates yourself.

The data is read into ~stock_data~.

#+BEGIN_SRC ipython
start = date(2015, 1, 1)
end = date(2016, 12, 31)
ticker = 'GOOG'
data_source = 'google'
stock_data = DataReader(ticker, data_source, start, end)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

To get an idea of the data that we just imported from the web, let's look at the first five lines of the file. This we do with the ~.head()~ method.

#+BEGIN_SRC ipython
stock_data.head()
#+END_SRC

#+RESULTS:
:RESULTS:

              Open    High     Low   Close   Volume
Date                                               
2015-01-02  529.01  531.27  524.10  524.81  1446662
2015-01-05  523.26  524.33  513.06  513.87  2054238
2015-01-06  515.00  516.18  501.05  501.96  2891950
2015-01-07  507.00  507.24  499.65  501.10  2059366
2015-01-08  497.99  503.48  491.00  502.68  3344395
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-01-02</th>
      <td>529.01</td>
      <td>531.27</td>
      <td>524.10</td>
      <td>524.81</td>
      <td>1446662</td>
    </tr>
    <tr>
      <th>2015-01-05</th>
      <td>523.26</td>
      <td>524.33</td>
      <td>513.06</td>
      <td>513.87</td>
      <td>2054238</td>
    </tr>
    <tr>
      <th>2015-01-06</th>
      <td>515.00</td>
      <td>516.18</td>
      <td>501.05</td>
      <td>501.96</td>
      <td>2891950</td>
    </tr>
    <tr>
      <th>2015-01-07</th>
      <td>507.00</td>
      <td>507.24</td>
      <td>499.65</td>
      <td>501.10</td>
      <td>2059366</td>
    </tr>
    <tr>
      <th>2015-01-08</th>
      <td>497.99</td>
      <td>503.48</td>
      <td>491.00</td>
      <td>502.68</td>
      <td>3344395</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

Let's plot the closing price for each date. We can plot with matplotlib, but we can also plot directly "from the pandas dataframe". We specify which variable we want to plot and can give some options (like the title of the graph).


#+BEGIN_SRC ipython
plt.style.use('seaborn')
stock_data['Close'].plot(title='Google')
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.axes._subplots.AxesSubplot at 0x114d4b4e0>
<matplotlib.figure.Figure at 0x114d56668>
[[file:ipython-inline-images/ob-ipython-66d9e685d75253ce58e7688b5605450c.png]]
:END:

Hence, this is a quick way to get an idea of your data. We can also plot two (or more) variable by specifying a list of the variables we want to plot.

#+BEGIN_SRC ipython
stock_data[['Close','Volume']].plot()
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.axes._subplots.AxesSubplot at 0x11494b9b0>
<matplotlib.figure.Figure at 0x11493ee10>
[[file:ipython-inline-images/ob-ipython-8a02ba024f9400b8b4d20ef4912d6443.png]]
:END:

Because volume and price are of different magnitudes, this graph is not so informative...

But we can specify that we want different $y$-axes for different variables. This we do as follows.

#+BEGIN_SRC ipython
stock_data[['Close','Volume']].plot(secondary_y='Volume',title="Google's closing price and volume")
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.axes._subplots.AxesSubplot at 0x114c035f8>
<matplotlib.figure.Figure at 0x114c0e908>
[[file:ipython-inline-images/ob-ipython-e3708e5f680a191c96485520a33398cd.png]]
:END:

We can also use matplotlib to make figures with the data in our dataframe. The following code plots volume against closing price in a scatter plot. If you would like to use the figure in another application (well, not Word obviously...), you can save it. You can save figures in a number of formats, here we choose png. The figure is saved in the directory where the notebook is.

#+BEGIN_SRC ipython
plt.scatter(stock_data.Volume,stock_data.Close)
plt.xlabel('Volume')
plt.ylabel('Close')
plt.title("Google's volume against closing price")
plt.show()
plt.savefig('Google_Volume_Price.png')
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x114fb9550>
[[file:ipython-inline-images/ob-ipython-b93d82f6109ec7cee613ccb8a879c1ae.png]]
<matplotlib.figure.Figure at 0x114f790b8>
:END:

You can also manipulate the data. E.g. add a column 'trade' (defined as volume times the closing price):

#+BEGIN_SRC ipython
stock_data['Trade']=stock_data['Volume']*stock_data['Close']
stock_data.head()
#+END_SRC

#+RESULTS:
:RESULTS:

              Open    High     Low   Close   Volume         Trade
Date                                                             
2015-01-02  529.01  531.27  524.10  524.81  1446662  7.592227e+08
2015-01-05  523.26  524.33  513.06  513.87  2054238  1.055611e+09
2015-01-06  515.00  516.18  501.05  501.96  2891950  1.451643e+09
2015-01-07  507.00  507.24  499.65  501.10  2059366  1.031948e+09
2015-01-08  497.99  503.48  491.00  502.68  3344395  1.681160e+09
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Volume</th>
      <th>Trade</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-01-02</th>
      <td>529.01</td>
      <td>531.27</td>
      <td>524.10</td>
      <td>524.81</td>
      <td>1446662</td>
      <td>7.592227e+08</td>
    </tr>
    <tr>
      <th>2015-01-05</th>
      <td>523.26</td>
      <td>524.33</td>
      <td>513.06</td>
      <td>513.87</td>
      <td>2054238</td>
      <td>1.055611e+09</td>
    </tr>
    <tr>
      <th>2015-01-06</th>
      <td>515.00</td>
      <td>516.18</td>
      <td>501.05</td>
      <td>501.96</td>
      <td>2891950</td>
      <td>1.451643e+09</td>
    </tr>
    <tr>
      <th>2015-01-07</th>
      <td>507.00</td>
      <td>507.24</td>
      <td>499.65</td>
      <td>501.10</td>
      <td>2059366</td>
      <td>1.031948e+09</td>
    </tr>
    <tr>
      <th>2015-01-08</th>
      <td>497.99</td>
      <td>503.48</td>
      <td>491.00</td>
      <td>502.68</td>
      <td>3344395</td>
      <td>1.681160e+09</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

Now suppose that you are really happy with your data and you want to save it. One option is to save your data as a csv-file. Google 'pandas write to csv' to find a way to do this.

#+BEGIN_SRC ipython
stock_data.to_csv('google_data.csv')
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

-----------------

*Exercise*

Google to find a way to save the dataframe to an excel file. (don't ask me why you would need to do that)

-----------------


** Getting data on a number of companies

Getting data on one company is fine, but often you may be interested in a number of companies. Then you can google to find out how to import data with datareader on a number of companies at the same time. The [[https://stackoverflow.com/questions/28174193/add-new-column-based-on-a-list-and-sort-date-by-newest/28210920#28210920][link here]] gives the following solution.

First, specify a python list with the tickers for the companies that you are interested in (can you guess which companies these are? if not google the tickers). Then we define a loop where we go over each of these tickers and use datareader to get the data. As we have more than one company, we need to keep track which rows of data relate to which company. Hence we add a column ~Symbol~ to the dataframe. Then we "put all the dataframes together" using ~concat~ and sort the data. Finally, we save the data to a csv file.


#+BEGIN_SRC ipython
symbols_list = ['AAPL', 'TSLA', 'GOOG']

symbols=[]
for ticker in symbols_list: 
    r = DataReader(ticker, 'yahoo', start, end)
    # add a symbol column
    r['Symbol'] = ticker 
    symbols.append(r)
# concatenate all the dfs
df_stocks = pd.concat(symbols)
#define cell with the columns that i need
cell= df_stocks[['Symbol','Open','High','Low','Adj Close','Volume']]
#changing sort of Symbol (ascending) and Date(descending) setting Symbol as first column and changing date format
cell.reset_index().sort(['Symbol', 'Date'], ascending=[1,0]).set_index('Symbol').to_csv('stock.csv', date_format='%d/%m/%Y')
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

Note that dataframe ~df_stocks~ has a panel structure: we have time series data on a number of companies. To get a first idea what it looks like, consider the first 10 rows.


-----------------

*Exercise*

Type the python/pandas code to see the first 10 lines of the data.

#+BEGIN_SRC ipython

#+END_SRC

-----------------

To get a first idea of the data, we can compare the average values (over our data-period) of our variables for the three companies. Pandas has the ~groupy~ method to do this. You specify the variable on which you want to group and then the method with which you want to summarize the data (like mean, standard deviation, sum, min, max etc.)

#+BEGIN_SRC ipython
df_stocks.groupby('Symbol').mean()
#+END_SRC

#+RESULTS:
:RESULTS:

              Open        High         Low       Close   Adj Close    Volume
Symbol                                                                      
AAPL    112.342713  113.335446  111.274574  112.318158  108.674161  45119018
GOOG    672.611522  678.140533  666.562108  672.453545  672.453545   1949443
TSLA    219.951426  223.412079  216.290218  219.910040  219.910040   4460271
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Symbol</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>AAPL</th>
      <td>112.342713</td>
      <td>113.335446</td>
      <td>111.274574</td>
      <td>112.318158</td>
      <td>108.674161</td>
      <td>45119018</td>
    </tr>
    <tr>
      <th>GOOG</th>
      <td>672.611522</td>
      <td>678.140533</td>
      <td>666.562108</td>
      <td>672.453545</td>
      <td>672.453545</td>
      <td>1949443</td>
    </tr>
    <tr>
      <th>TSLA</th>
      <td>219.951426</td>
      <td>223.412079</td>
      <td>216.290218</td>
      <td>219.910040</td>
      <td>219.910040</td>
      <td>4460271</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

Clearly google's shares trade at higher prices than the other two companies.

When you looked at the first ten rows of the dataframe, you will have noticed that the companies are simply in different rows. This may not always be the optimal way to deal with the data. Another way to work with the data is that rows consist of dates only and the different columns are indexed by company. Hence, we get an opening price for each company, a highest price for each company etc. 

In pandas this is easy to do. We add the company ticker (in the column ~Symbol~) to the index (which currently consists of ~Date~ only). Now each row has a unique index. 

-----------------

*Exercise*

Why was there not a unique index for each row above?

-----------------

Then we "unstack" the data on the column (now part of the index) ~Symbol~.


#+BEGIN_SRC ipython
df_stocks_unstacked = df_stocks.set_index('Symbol', append=True).unstack(level='Symbol')
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

-----------------

*Exercise*

Look at the first 5 rows of this new dataframe.

#+BEGIN_SRC ipython

#+END_SRC

-----------------

We plot the closing price with the unstacked data.

#+BEGIN_SRC ipython
df_stocks_unstacked['Close'].plot()
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.axes._subplots.AxesSubplot at 0x116388908>
<matplotlib.figure.Figure at 0x11619cc88>
[[file:ipython-inline-images/ob-ipython-ae084ce391df46f998557901d7317379.png]]
:END:

-----------------

*Exercise*

Save the dataframe ~df_stocks~ to a csv file.

#+BEGIN_SRC ipython

#+END_SRC

-----------------


* Economic series

From the Federal Reserve Bank of St. Louis we can also retrieve data.

Suppose we are interested in GDP. Go to the [[https://fred.stlouisfed.org/][website]] and type GDP on the top right of the page "Search FRED". Then select the GDP series that you want. We clicked on [[https://fred.stlouisfed.org/series/A191RL1Q225SBEA][this one]]. The title reads "Real Gross Domestic Product (A191RL1Q225SBEA)"; the expression in brackets is the name we need for python to retrieve this data. If we do not set an end-date in `DataReader`, it goes up to the last observation.

#+BEGIN_SRC ipython
series_code = 'A191RL1Q225SBEA' 
data_source = 'fred'
gdp_data = DataReader(series_code, data_source, date(1947,4,1))
gdp_data.head()
#+END_SRC

#+RESULTS:
:RESULTS:

            A191RL1Q225SBEA
DATE                       
1947-04-01             -0.4
1947-07-01             -0.4
1947-10-01              6.4
1948-01-01              6.0
1948-04-01              6.7
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A191RL1Q225SBEA</th>
    </tr>
    <tr>
      <th>DATE</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1947-04-01</th>
      <td>-0.4</td>
    </tr>
    <tr>
      <th>1947-07-01</th>
      <td>-0.4</td>
    </tr>
    <tr>
      <th>1947-10-01</th>
      <td>6.4</td>
    </tr>
    <tr>
      <th>1948-01-01</th>
      <td>6.0</td>
    </tr>
    <tr>
      <th>1948-04-01</th>
      <td>6.7</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

This is quarterly data and measures the percent change from the previous period.

-----------------

*Exercise*

Plot this series of GDP and add "Percentage change in US GDP" in the title of the graph.

#+BEGIN_SRC ipython

#+END_SRC

-----------------

We can also combine datasets from different sources. We are going to add an interest rate to our google stock data. Go to this [[https://fred.stlouisfed.org/series/DGS10][website]] for the 10-year treasury rate.

-----------------

*Exercise*

Complete the cell below to read the data into ~data_10_year~.

#+BEGIN_SRC ipython
series_code = ''
data_source = ''
data_10_year = DataReader(series_code, data_source, start,end)
#+END_SRC

-----------------

The ~series_code~ is not the most intuitive name to use. Hence, we are going to rename it. 

#+BEGIN_SRC ipython
series_name = '10-year Treasury'
data_10_year = data_10_year.rename(columns={series_code: series_name})
#+END_SRC


-----------------

*Exercise*

Plot the dataframe ~data_10_year~.

#+BEGIN_SRC ipython

#+END_SRC

-----------------

We combine the treasury data with the google share price. We do this with the ~concat~ method from pandas. "axis=1" means that we add columns together into the new dataframe ~combined data~.

#+BEGIN_SRC ipython
combined_data = pd.concat([stock_data['Close'], data_10_year], axis=1)
combined_data.head()
#+END_SRC


-----------------

*Exercise*

Plot the dataframe ~combined_data~. Notice that you need to add a second y-axis for this graph to be informative.

#+BEGIN_SRC ipython

#+END_SRC

-----------------

If you are interested in competition in the banking sector, I highly recommend the following data series from this website: DDOI05USA156NWDB

* API

A number of institutes actually have an API (application programming interface) to retrieve their data. Whereas ~datareader~ as used above is a generic reader for a number of sources. An API giving you more options may exist. Simply google to see whether such an API exists for the data that you are interested in.

To illustrate this, we use the World Bank API ~wbdata~ that can be found [[http://wbdata.readthedocs.io/en/latest/][here]]. Currently this is not (yet) available on anaconda. Hence, you can install it with `pip install wbdata`.

The World Bank uses country codes and there is a search function to find the relevant code.

#+BEGIN_SRC ipython
import wbdata as wbdata
wbdata.search_countries("united")
#+END_SRC

#+RESULTS:
:RESULTS:
ARE	United Arab Emirates
GBR	United Kingdom
USA	United States

:END:

#+BEGIN_SRC ipython
wbdata.get_source()
#+END_SRC

#+RESULTS:
:RESULTS:
11	Africa Development Indicators
36	Statistical Capacity Indicators
31	Country Policy and Institutional Assessment
41	Country Partnership Strategy for India (FY2013 - 17)
1 	Doing Business
30	Exporter Dynamics Database ��� Indicators at Country-Year Level
12	Education Statistics
13	Enterprise Surveys
28	Global Financial Inclusion
33	G20 Financial Inclusion Indicators
14	Gender Statistics
15	Global Economic Monitor
27	Global Economic Prospects
32	Global Financial Development
21	Global Economic Monitor Commodities
55	Commodity Prices- History and Projections
34	Global Partnership for Education
29	The Atlas of Social Protection: Indicators of Resilience and Equity
16	Health Nutrition and Population Statistics
39	Health Nutrition and Population Statistics by Wealth Quintile
40	Population estimates and projections
18	IDA Results Measurement System
45	Indonesia Database for Policy and Economic Research
6 	International Debt Statistics
54	Joint External Debt Hub
25	Jobs
37	LAC Equity Lab
19	Millennium Development Goals
24	Poverty and Equity
20	Quarterly Public Sector Debt
23	Quarterly External Debt Statistics GDDS
22	Quarterly External Debt Statistics SDDS
44	Readiness for Investment in Sustainable Energy
46	Sustainable Development Goals 
35	Sustainable Energy for All
5 	Subnational Malnutrition Database
38	Subnational Poverty
50	Subnational Population
43	Wealth accounting
57	WDI Database Archives
2 	World Development Indicators
3 	Worldwide Governance Indicators

:END:

Suppose you are interested in "World Development Indicators", then you type:

#+BEGIN_SRC ipython
wbdata.get_indicator(source=2)
#+END_SRC

Let's say we are interested in gdp per capita. Then we type something like:

#+BEGIN_SRC ipython
wbdata.search_indicators("gdp per capita")
#+END_SRC

#+RESULTS:
:RESULTS:
6.0.GDPpc_constant      	GDP per capita, PPP (constant 2011 international $) 
FB.DPT.INSU.PC.ZS       	Deposit insurance coverage (% of GDP per capita)
NY.GDP.PCAP.PP.KD.ZG    	GDP per capita, PPP annual growth (%)
NY.GDP.PCAP.PP.KD.87    	GDP per capita, PPP (constant 1987 international $)
NY.GDP.PCAP.PP.KD       	GDP per capita, PPP (constant 2011 international $)
NY.GDP.PCAP.PP.CD       	GDP per capita, PPP (current international $)
NY.GDP.PCAP.KN          	GDP per capita (constant LCU)
NY.GDP.PCAP.KD.ZG       	GDP per capita growth (annual %)
NY.GDP.PCAP.KD          	GDP per capita (constant 2010 US$)
NY.GDP.PCAP.CN          	GDP per capita (current LCU)
NY.GDP.PCAP.CD          	GDP per capita (current US$)
NV.AGR.PCAP.KD.ZG       	Real agricultural GDP per capita growth rate (%)
SE.XPD.TERT.PC.ZS       	Government expenditure per tertiary student as % of GDP per capita (%)
SE.XPD.SECO.PC.ZS       	Government expenditure per student, secondary (% of GDP per capita)
SE.XPD.PRIM.PC.ZS       	Government expenditure per student, primary (% of GDP per capita)
UIS.XUNIT.GDPCAP.4.FSGOV	Government expenditure per post-secondary non-tertiary student as % of GDP per capita (%)
UIS.XUNIT.GDPCAP.3.FSGOV	Government expenditure per upper secondary student as % of GDP per capita (%)
UIS.XUNIT.GDPCAP.2.FSGOV	Government expenditure per lower secondary student as % of GDP per capita (%)

:END:

#+BEGIN_SRC ipython
data_date = (date(2010, 1, 1), date(2017, 1, 1))
indicators = {"SE.XPD.PRIM.PC.ZS": "Government_expenditure_primary", "NY.GDP.PCAP.KD": "GDP_pc"}
df_wb = wbdata.get_dataframe(indicators, country=("USA", "GBR"), data_date=data_date)
df_wb.describe()
#+END_SRC

#+RESULTS:
:RESULTS:

             GDP_pc  Government_expenditure_primary
count     14.000000                        9.000000
mean   45098.062774                       22.049704
std     5429.684695                        1.919101
min    38709.911662                       19.784019
25%    39937.246151                       20.564369
50%    44988.430314                       22.099590
75%    49856.868038                       23.206720
max    52194.885762                       24.909451
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>GDP_pc</th>
      <th>Government_expenditure_primary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>14.000000</td>
      <td>9.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>45098.062774</td>
      <td>22.049704</td>
    </tr>
    <tr>
      <th>std</th>
      <td>5429.684695</td>
      <td>1.919101</td>
    </tr>
    <tr>
      <th>min</th>
      <td>38709.911662</td>
      <td>19.784019</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>39937.246151</td>
      <td>20.564369</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>44988.430314</td>
      <td>22.099590</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>49856.868038</td>
      <td>23.206720</td>
    </tr>
    <tr>
      <th>max</th>
      <td>52194.885762</td>
      <td>24.909451</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

To get an idea of what the data looks like, consider the first 5 rows.

#+BEGIN_SRC ipython
df_wb.head()
#+END_SRC

#+RESULTS:
:RESULTS:

                           GDP_pc  Government_expenditure_primary
country        date                                              
United Kingdom 2016  41602.981812                             NaN
               2015  41183.933842                             NaN
               2014  40621.313068                        22.45294
               2013  39709.223846                        23.20672
               2012  39226.336499                             NaN
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>GDP_pc</th>
      <th>Government_expenditure_primary</th>
    </tr>
    <tr>
      <th>country</th>
      <th>date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">United Kingdom</th>
      <th>2016</th>
      <td>41602.981812</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2015</th>
      <td>41183.933842</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014</th>
      <td>40621.313068</td>
      <td>22.45294</td>
    </tr>
    <tr>
      <th>2013</th>
      <td>39709.223846</td>
      <td>23.20672</td>
    </tr>
    <tr>
      <th>2012</th>
      <td>39226.336499</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

As you can see this data set already has an index consisting of year and country. Now we want to have a single index (date) and columns for each country.

--------------

*Exercise* 

Use the unstack method to create a new dataframe ~df_wb_unstacked~.

#+BEGIN_SRC ipython

#+END_SRC


Plot `GDP_pc` for each country.

#+BEGIN_SRC ipython

#+END_SRC

------------

